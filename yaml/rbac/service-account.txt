apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-service-account
  namespace: my-namespace

---

kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: pod-reader-role
  namespace: my-namespace
rules:
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["get"]

---

kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: pod-reader-rolebinding
  namespace: my-namespace
subjects:
- kind: ServiceAccount
  name: my-service-account
  namespace: my-namespace
roleRef:
  kind: Role
  name: pod-reader-role
  apiGroup: rbac.authorization.k8s.io
Explanation of each part of the manifest:

ServiceAccount: This section creates a ServiceAccount named "my-service-account" in the namespace "my-namespace".

Role: This section defines a Role named "pod-reader-role" that specifies permissions for the ServiceAccount to read pods in the namespace. The apiGroups, resources, and verbs fields are used to specify the scope of permissions.

RoleBinding: This section creates a RoleBinding named "pod-reader-rolebinding" that binds the Role "pod-reader-role" to the ServiceAccount "my-service-account" within the same namespace.

In this example, the ServiceAccount "my-service-account" is granted permission to get information about pods within the "my-namespace" namespace. This is done by creating a Role that specifies the desired permissions and then creating a RoleBinding that associates the Role with the ServiceAccount.

Remember to replace "my-service-account" and "my-namespace" with appropriate names for your use case. This manifest provides a basic example of granting pod read access; you can modify it to suit your specific access requirements.





